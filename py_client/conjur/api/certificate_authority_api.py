# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from conjur.api_client import ApiClient
from conjur.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CertificateAuthorityApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sign(self, account, service_id, csr, ttl, **kwargs):  # noqa: E501
        """Gets a signed certificate from the configured Certificate Authority service.  # noqa: E501

        Gets a signed certificate from the configured Certificate Authority service.  The request must include a valid Certificate Signing Request, and a desired TTL in ISO 8601 format.  *** IMPORTANT *** This endpoint is part of an early implementation of support for using Conjur as a certificate authority, and is currently available at the Community (or early alpha) level. This endpoint is still subject to breaking changes in the future.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign(account, service_id, csr, ttl, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str service_id: Name of the Certificate Authority service (required)
        :param str csr: (required)
        :param str ttl: (required)
        :param str accept: Setting the Accept header to `application/x-pem-file` allows Conjur to respond with a formatted certificate
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CertificateJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sign_with_http_info(account, service_id, csr, ttl, **kwargs)  # noqa: E501

    def sign_with_http_info(self, account, service_id, csr, ttl, **kwargs):  # noqa: E501
        """Gets a signed certificate from the configured Certificate Authority service.  # noqa: E501

        Gets a signed certificate from the configured Certificate Authority service.  The request must include a valid Certificate Signing Request, and a desired TTL in ISO 8601 format.  *** IMPORTANT *** This endpoint is part of an early implementation of support for using Conjur as a certificate authority, and is currently available at the Community (or early alpha) level. This endpoint is still subject to breaking changes in the future.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_with_http_info(account, service_id, csr, ttl, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str service_id: Name of the Certificate Authority service (required)
        :param str csr: (required)
        :param str ttl: (required)
        :param str accept: Setting the Accept header to `application/x-pem-file` allows Conjur to respond with a formatted certificate
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CertificateJson, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'service_id',
            'csr',
            'ttl',
            'accept',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in local_var_params or  # noqa: E501
                                                        local_var_params['account'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account` when calling `sign`")  # noqa: E501
        # verify the required parameter 'service_id' is set
        if self.api_client.client_side_validation and ('service_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['service_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `service_id` when calling `sign`")  # noqa: E501
        # verify the required parameter 'csr' is set
        if self.api_client.client_side_validation and ('csr' not in local_var_params or  # noqa: E501
                                                        local_var_params['csr'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `csr` when calling `sign`")  # noqa: E501
        # verify the required parameter 'ttl' is set
        if self.api_client.client_side_validation and ('ttl' not in local_var_params or  # noqa: E501
                                                        local_var_params['ttl'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ttl` when calling `sign`")  # noqa: E501

        if self.api_client.client_side_validation and ('account' in local_var_params and  # noqa: E501
                                                        len(local_var_params['account']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `account` when calling `sign`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('service_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['service_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `service_id` when calling `sign`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('accept' in local_var_params and  # noqa: E501
                                                        len(local_var_params['accept']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `accept` when calling `sign`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `sign`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account' in local_var_params:
            path_params['account'] = local_var_params['account']  # noqa: E501
        if 'service_id' in local_var_params:
            path_params['service_id'] = local_var_params['service_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'csr' in local_var_params:
            form_params.append(('csr', local_var_params['csr']))  # noqa: E501
        if 'ttl' in local_var_params:
            form_params.append(('ttl', local_var_params['ttl']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/x-pem-file'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ca/{account}/{service_id}/sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
