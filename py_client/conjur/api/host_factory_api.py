# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from conjur.api_client import ApiClient
from conjur.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class HostFactoryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_host(self, id, **kwargs):  # noqa: E501
        """Creates a Host using the Host Factory.  # noqa: E501

        Creates a Host using the Host Factory and returns a JSON description of it.  Requires a host factory token, which can be created using the create tokens API. In practice, this token is usually provided automatically as part of Conjur integration with your host provisioning infrastructure.  Note: If the token was created with a CIDR restriction, you must make this API request from a whitelisted address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_host(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Identifier of the host to be created. It will be created within the account of the host factory. (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param object annotations: Annotations to apply to the new host
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CreateHost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_host_with_http_info(id, **kwargs)  # noqa: E501

    def create_host_with_http_info(self, id, **kwargs):  # noqa: E501
        """Creates a Host using the Host Factory.  # noqa: E501

        Creates a Host using the Host Factory and returns a JSON description of it.  Requires a host factory token, which can be created using the create tokens API. In practice, this token is usually provided automatically as part of Conjur integration with your host provisioning infrastructure.  Note: If the token was created with a CIDR restriction, you must make this API request from a whitelisted address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_host_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Identifier of the host to be created. It will be created within the account of the host factory. (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param object annotations: Annotations to apply to the new host
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CreateHost, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'x_request_id',
            'annotations'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_host" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `create_host`")  # noqa: E501

        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `create_host`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'annotations' in local_var_params:
            form_params.append(('annotations', local_var_params['annotations']))  # noqa: E501
        if 'id' in local_var_params:
            form_params.append(('id', local_var_params['id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/host_factories/hosts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateHost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_token(self, expiration, host_factory, **kwargs):  # noqa: E501
        """Creates one or more host identity tokens.  # noqa: E501

        Creates one or more tokens which can be used to bootstrap host identity. Responds with a JSON document containing the tokens and their restrictions.  If the tokens are created with a CIDR restriction, Conjur will only accept them from the whitelisted IP ranges.  ##### Permissions required # `execute` privilege on the Host Factory.\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_token(expiration, host_factory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expiration: `ISO 8601 datetime` denoting a requested expiration time. (required)
        :param str host_factory: Fully qualified host factory ID (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param list[str] cidr: Number of host tokens to create
        :param int count: Number of host tokens to create
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_token_with_http_info(expiration, host_factory, **kwargs)  # noqa: E501

    def create_token_with_http_info(self, expiration, host_factory, **kwargs):  # noqa: E501
        """Creates one or more host identity tokens.  # noqa: E501

        Creates one or more tokens which can be used to bootstrap host identity. Responds with a JSON document containing the tokens and their restrictions.  If the tokens are created with a CIDR restriction, Conjur will only accept them from the whitelisted IP ranges.  ##### Permissions required # `execute` privilege on the Host Factory.\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_token_with_http_info(expiration, host_factory, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expiration: `ISO 8601 datetime` denoting a requested expiration time. (required)
        :param str host_factory: Fully qualified host factory ID (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param list[str] cidr: Number of host tokens to create
        :param int count: Number of host tokens to create
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'expiration',
            'host_factory',
            'x_request_id',
            'cidr',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_token" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'expiration' is set
        if self.api_client.client_side_validation and ('expiration' not in local_var_params or  # noqa: E501
                                                        local_var_params['expiration'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `expiration` when calling `create_token`")  # noqa: E501
        # verify the required parameter 'host_factory' is set
        if self.api_client.client_side_validation and ('host_factory' not in local_var_params or  # noqa: E501
                                                        local_var_params['host_factory'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `host_factory` when calling `create_token`")  # noqa: E501

        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `create_token`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'cidr' in local_var_params:
            form_params.append(('cidr', local_var_params['cidr']))  # noqa: E501
            collection_formats['cidr'] = 'csv'  # noqa: E501
        if 'count' in local_var_params:
            form_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'expiration' in local_var_params:
            form_params.append(('expiration', local_var_params['expiration']))  # noqa: E501
        if 'host_factory' in local_var_params:
            form_params.append(('host_factory', local_var_params['host_factory']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/host_factory_tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_token(self, token, **kwargs):  # noqa: E501
        """Revokes a token, immediately disabling it.  # noqa: E501

        Revokes a token, immediately disabling it.  ##### Permissions required  `update` privilege on the host factory.\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_token(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: The host factory token to revoke (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.revoke_token_with_http_info(token, **kwargs)  # noqa: E501

    def revoke_token_with_http_info(self, token, **kwargs):  # noqa: E501
        """Revokes a token, immediately disabling it.  # noqa: E501

        Revokes a token, immediately disabling it.  ##### Permissions required  `update` privilege on the host factory.\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_token_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: The host factory token to revoke (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_token" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `revoke_token`")  # noqa: E501

        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `revoke_token`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'token' in local_var_params:
            path_params['token'] = local_var_params['token']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/host_factory_tokens/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
