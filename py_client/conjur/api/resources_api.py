# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from conjur.api_client import ApiClient
from conjur.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ResourcesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def show_resource(self, account, kind, identifier, **kwargs):  # noqa: E501
        """Shows a description of a single resource.  # noqa: E501

        Details about a single resource.  If `permitted_roles` and `privilege` are given, Conjur lists the roles with the specified privilege on the resource.  If `check`, `privilege` and `role` are given, Conjur checks if the specified role has the privilege on the resource.  If `permitted_roles` and `check` are both given, Conjur responds to the `check` call ONLY.  ##### Permissions Required   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_resource(account, kind, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str identifier: ID of the resource for which to get the information about (required)
        :param bool permitted_roles: Lists the roles which have the named privilege on a resource.
        :param str privilege: Level of privilege to filter on. Can only be used in combination with `permitted_roles` or `check` parameter.
        :param bool check: Check whether a role has a privilege on a resource.
        :param str role: Role to check privilege on. Can only be used in combination with `check` parameter.
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.show_resource_with_http_info(account, kind, identifier, **kwargs)  # noqa: E501

    def show_resource_with_http_info(self, account, kind, identifier, **kwargs):  # noqa: E501
        """Shows a description of a single resource.  # noqa: E501

        Details about a single resource.  If `permitted_roles` and `privilege` are given, Conjur lists the roles with the specified privilege on the resource.  If `check`, `privilege` and `role` are given, Conjur checks if the specified role has the privilege on the resource.  If `permitted_roles` and `check` are both given, Conjur responds to the `check` call ONLY.  ##### Permissions Required   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_resource_with_http_info(account, kind, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str identifier: ID of the resource for which to get the information about (required)
        :param bool permitted_roles: Lists the roles which have the named privilege on a resource.
        :param str privilege: Level of privilege to filter on. Can only be used in combination with `permitted_roles` or `check` parameter.
        :param bool check: Check whether a role has a privilege on a resource.
        :param str role: Role to check privilege on. Can only be used in combination with `check` parameter.
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Resource, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'kind',
            'identifier',
            'permitted_roles',
            'privilege',
            'check',
            'role',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_resource" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in local_var_params or  # noqa: E501
                                                        local_var_params['account'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account` when calling `show_resource`")  # noqa: E501
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and ('kind' not in local_var_params or  # noqa: E501
                                                        local_var_params['kind'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kind` when calling `show_resource`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if self.api_client.client_side_validation and ('identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `identifier` when calling `show_resource`")  # noqa: E501

        if self.api_client.client_side_validation and ('account' in local_var_params and  # noqa: E501
                                                        len(local_var_params['account']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `account` when calling `show_resource`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('kind' in local_var_params and  # noqa: E501
                                                        len(local_var_params['kind']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `kind` when calling `show_resource`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('identifier' in local_var_params and  # noqa: E501
                                                        len(local_var_params['identifier']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `identifier` when calling `show_resource`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('privilege' in local_var_params and  # noqa: E501
                                                        len(local_var_params['privilege']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `privilege` when calling `show_resource`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('role' in local_var_params and  # noqa: E501
                                                        len(local_var_params['role']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `role` when calling `show_resource`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `show_resource`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account' in local_var_params:
            path_params['account'] = local_var_params['account']  # noqa: E501
        if 'kind' in local_var_params:
            path_params['kind'] = local_var_params['kind']  # noqa: E501
        if 'identifier' in local_var_params:
            path_params['identifier'] = local_var_params['identifier']  # noqa: E501

        query_params = []
        if 'permitted_roles' in local_var_params and local_var_params['permitted_roles'] is not None:  # noqa: E501
            query_params.append(('permitted_roles', local_var_params['permitted_roles']))  # noqa: E501
        if 'privilege' in local_var_params and local_var_params['privilege'] is not None:  # noqa: E501
            query_params.append(('privilege', local_var_params['privilege']))  # noqa: E501
        if 'check' in local_var_params and local_var_params['check'] is not None:  # noqa: E501
            query_params.append(('check', local_var_params['check']))  # noqa: E501
        if 'role' in local_var_params and local_var_params['role'] is not None:  # noqa: E501
            query_params.append(('role', local_var_params['role']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/resources/{account}/{kind}/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_resources_for_account(self, account, **kwargs):  # noqa: E501
        """Lists resources within an organization account.  # noqa: E501

        Lists resources within an organization account.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_resources_for_account(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource
        :param str search: Filter resources based on this value by name
        :param int offset: When listing resources, start at this item number.
        :param int limit: When listing resources, return up to this many results.
        :param bool count: When listing resources, if `true`, return only the count of the results.
        :param str role: Retrieves the resources list for a different role if the authenticated role has access
        :param str acting_as: Retrieves the resources list for a different role if the authenticated role has access
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Resource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.show_resources_for_account_with_http_info(account, **kwargs)  # noqa: E501

    def show_resources_for_account_with_http_info(self, account, **kwargs):  # noqa: E501
        """Lists resources within an organization account.  # noqa: E501

        Lists resources within an organization account.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_resources_for_account_with_http_info(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource
        :param str search: Filter resources based on this value by name
        :param int offset: When listing resources, start at this item number.
        :param int limit: When listing resources, return up to this many results.
        :param bool count: When listing resources, if `true`, return only the count of the results.
        :param str role: Retrieves the resources list for a different role if the authenticated role has access
        :param str acting_as: Retrieves the resources list for a different role if the authenticated role has access
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Resource], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'kind',
            'search',
            'offset',
            'limit',
            'count',
            'role',
            'acting_as',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_resources_for_account" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in local_var_params or  # noqa: E501
                                                        local_var_params['account'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account` when calling `show_resources_for_account`")  # noqa: E501

        if self.api_client.client_side_validation and ('account' in local_var_params and  # noqa: E501
                                                        len(local_var_params['account']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `account` when calling `show_resources_for_account`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('kind' in local_var_params and  # noqa: E501
                                                        len(local_var_params['kind']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `kind` when calling `show_resources_for_account`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('search' in local_var_params and  # noqa: E501
                                                        len(local_var_params['search']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `search` when calling `show_resources_for_account`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('role' in local_var_params and  # noqa: E501
                                                        len(local_var_params['role']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `role` when calling `show_resources_for_account`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('acting_as' in local_var_params and  # noqa: E501
                                                        len(local_var_params['acting_as']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `acting_as` when calling `show_resources_for_account`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `show_resources_for_account`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account' in local_var_params:
            path_params['account'] = local_var_params['account']  # noqa: E501

        query_params = []
        if 'kind' in local_var_params and local_var_params['kind'] is not None:  # noqa: E501
            query_params.append(('kind', local_var_params['kind']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'role' in local_var_params and local_var_params['role'] is not None:  # noqa: E501
            query_params.append(('role', local_var_params['role']))  # noqa: E501
        if 'acting_as' in local_var_params and local_var_params['acting_as'] is not None:  # noqa: E501
            query_params.append(('acting_as', local_var_params['acting_as']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/resources/{account}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Resource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_resources_for_all_accounts(self, **kwargs):  # noqa: E501
        """Lists resources within an organization account.  # noqa: E501

        Lists resources within an organization account.  In the absence of an `account` query parameter, shows results for the account of the authorization token user.  If an `account` query parameter is given, shows results for the specified account.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`.\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_resources_for_all_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name
        :param str kind: Type of resource
        :param str search: Filter resources based on this value by name
        :param int offset: When listing resources, start at this item number.
        :param int limit: When listing resources, return up to this many results.
        :param bool count: When listing resources, if `true`, return only the count of the results.
        :param str role: Retrieves the resources list for a different role if the authenticated role has access
        :param str acting_as: Retrieves the resources list for a different role if the authenticated role has access
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Resource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.show_resources_for_all_accounts_with_http_info(**kwargs)  # noqa: E501

    def show_resources_for_all_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Lists resources within an organization account.  # noqa: E501

        Lists resources within an organization account.  In the absence of an `account` query parameter, shows results for the account of the authorization token user.  If an `account` query parameter is given, shows results for the specified account.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`.\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_resources_for_all_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name
        :param str kind: Type of resource
        :param str search: Filter resources based on this value by name
        :param int offset: When listing resources, start at this item number.
        :param int limit: When listing resources, return up to this many results.
        :param bool count: When listing resources, if `true`, return only the count of the results.
        :param str role: Retrieves the resources list for a different role if the authenticated role has access
        :param str acting_as: Retrieves the resources list for a different role if the authenticated role has access
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Resource], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'kind',
            'search',
            'offset',
            'limit',
            'count',
            'role',
            'acting_as',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_resources_for_all_accounts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('account' in local_var_params and  # noqa: E501
                                                        len(local_var_params['account']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `account` when calling `show_resources_for_all_accounts`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('kind' in local_var_params and  # noqa: E501
                                                        len(local_var_params['kind']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `kind` when calling `show_resources_for_all_accounts`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('search' in local_var_params and  # noqa: E501
                                                        len(local_var_params['search']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `search` when calling `show_resources_for_all_accounts`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('role' in local_var_params and  # noqa: E501
                                                        len(local_var_params['role']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `role` when calling `show_resources_for_all_accounts`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('acting_as' in local_var_params and  # noqa: E501
                                                        len(local_var_params['acting_as']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `acting_as` when calling `show_resources_for_all_accounts`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `show_resources_for_all_accounts`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account' in local_var_params and local_var_params['account'] is not None:  # noqa: E501
            query_params.append(('account', local_var_params['account']))  # noqa: E501
        if 'kind' in local_var_params and local_var_params['kind'] is not None:  # noqa: E501
            query_params.append(('kind', local_var_params['kind']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'role' in local_var_params and local_var_params['role'] is not None:  # noqa: E501
            query_params.append(('role', local_var_params['role']))  # noqa: E501
        if 'acting_as' in local_var_params and local_var_params['acting_as'] is not None:  # noqa: E501
            query_params.append(('acting_as', local_var_params['acting_as']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Resource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_resources_for_kind(self, account, kind, **kwargs):  # noqa: E501
        """Lists resources of the same kind within an organization account.  # noqa: E501

        Lists resources of the same kind within an organization account.  Kinds of resources include: policy, user, host, group, layer, or variable  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_resources_for_kind(account, kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str search: Filter resources based on this value by name
        :param int offset: When listing resources, start at this item number.
        :param int limit: When listing resources, return up to this many results.
        :param bool count: When listing resources, if `true`, return only the count of the results.
        :param str role: Retrieves the resources list for a different role if the authenticated role has access
        :param str acting_as: Retrieves the resources list for a different role if the authenticated role has access
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Resource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.show_resources_for_kind_with_http_info(account, kind, **kwargs)  # noqa: E501

    def show_resources_for_kind_with_http_info(self, account, kind, **kwargs):  # noqa: E501
        """Lists resources of the same kind within an organization account.  # noqa: E501

        Lists resources of the same kind within an organization account.  Kinds of resources include: policy, user, host, group, layer, or variable  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_resources_for_kind_with_http_info(account, kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str search: Filter resources based on this value by name
        :param int offset: When listing resources, start at this item number.
        :param int limit: When listing resources, return up to this many results.
        :param bool count: When listing resources, if `true`, return only the count of the results.
        :param str role: Retrieves the resources list for a different role if the authenticated role has access
        :param str acting_as: Retrieves the resources list for a different role if the authenticated role has access
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Resource], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'kind',
            'search',
            'offset',
            'limit',
            'count',
            'role',
            'acting_as',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_resources_for_kind" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in local_var_params or  # noqa: E501
                                                        local_var_params['account'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account` when calling `show_resources_for_kind`")  # noqa: E501
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and ('kind' not in local_var_params or  # noqa: E501
                                                        local_var_params['kind'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kind` when calling `show_resources_for_kind`")  # noqa: E501

        if self.api_client.client_side_validation and ('account' in local_var_params and  # noqa: E501
                                                        len(local_var_params['account']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `account` when calling `show_resources_for_kind`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('kind' in local_var_params and  # noqa: E501
                                                        len(local_var_params['kind']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `kind` when calling `show_resources_for_kind`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('search' in local_var_params and  # noqa: E501
                                                        len(local_var_params['search']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `search` when calling `show_resources_for_kind`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('role' in local_var_params and  # noqa: E501
                                                        len(local_var_params['role']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `role` when calling `show_resources_for_kind`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('acting_as' in local_var_params and  # noqa: E501
                                                        len(local_var_params['acting_as']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `acting_as` when calling `show_resources_for_kind`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `show_resources_for_kind`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account' in local_var_params:
            path_params['account'] = local_var_params['account']  # noqa: E501
        if 'kind' in local_var_params:
            path_params['kind'] = local_var_params['kind']  # noqa: E501

        query_params = []
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'role' in local_var_params and local_var_params['role'] is not None:  # noqa: E501
            query_params.append(('role', local_var_params['role']))  # noqa: E501
        if 'acting_as' in local_var_params and local_var_params['acting_as'] is not None:  # noqa: E501
            query_params.append(('acting_as', local_var_params['acting_as']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/resources/{account}/{kind}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Resource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
