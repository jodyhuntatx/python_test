# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from conjur.api_client import ApiClient
from conjur.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RolesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_member_to_role(self, account, kind, identifier, members, member, **kwargs):  # noqa: E501
        """Update or modify an existing role membership  # noqa: E501

        Updates or modifies an existing role membership.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  When the `members` query parameter is provided, you will get the members of a role.  When the `members` and `member` query parameters are provided, the role specfified by `member` will be added as a member of the role specified in the endpoint URI.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_to_role(account, kind, identifier, members, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str identifier: ID of the role for which to get the information about (required)
        :param str members: Returns a list of the Role's members. (required)
        :param str member: The identifier of the Role to be added as a member. (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_member_to_role_with_http_info(account, kind, identifier, members, member, **kwargs)  # noqa: E501

    def add_member_to_role_with_http_info(self, account, kind, identifier, members, member, **kwargs):  # noqa: E501
        """Update or modify an existing role membership  # noqa: E501

        Updates or modifies an existing role membership.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  When the `members` query parameter is provided, you will get the members of a role.  When the `members` and `member` query parameters are provided, the role specfified by `member` will be added as a member of the role specified in the endpoint URI.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_member_to_role_with_http_info(account, kind, identifier, members, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str identifier: ID of the role for which to get the information about (required)
        :param str members: Returns a list of the Role's members. (required)
        :param str member: The identifier of the Role to be added as a member. (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'kind',
            'identifier',
            'members',
            'member',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_member_to_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in local_var_params or  # noqa: E501
                                                        local_var_params['account'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account` when calling `add_member_to_role`")  # noqa: E501
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and ('kind' not in local_var_params or  # noqa: E501
                                                        local_var_params['kind'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kind` when calling `add_member_to_role`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if self.api_client.client_side_validation and ('identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `identifier` when calling `add_member_to_role`")  # noqa: E501
        # verify the required parameter 'members' is set
        if self.api_client.client_side_validation and ('members' not in local_var_params or  # noqa: E501
                                                        local_var_params['members'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `members` when calling `add_member_to_role`")  # noqa: E501
        # verify the required parameter 'member' is set
        if self.api_client.client_side_validation and ('member' not in local_var_params or  # noqa: E501
                                                        local_var_params['member'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `member` when calling `add_member_to_role`")  # noqa: E501

        if self.api_client.client_side_validation and ('account' in local_var_params and  # noqa: E501
                                                        len(local_var_params['account']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `account` when calling `add_member_to_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('kind' in local_var_params and  # noqa: E501
                                                        len(local_var_params['kind']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `kind` when calling `add_member_to_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('identifier' in local_var_params and  # noqa: E501
                                                        len(local_var_params['identifier']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `identifier` when calling `add_member_to_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('member' in local_var_params and  # noqa: E501
                                                        len(local_var_params['member']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `member` when calling `add_member_to_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `add_member_to_role`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account' in local_var_params:
            path_params['account'] = local_var_params['account']  # noqa: E501
        if 'kind' in local_var_params:
            path_params['kind'] = local_var_params['kind']  # noqa: E501
        if 'identifier' in local_var_params:
            path_params['identifier'] = local_var_params['identifier']  # noqa: E501

        query_params = []
        if 'members' in local_var_params and local_var_params['members'] is not None:  # noqa: E501
            query_params.append(('members', local_var_params['members']))  # noqa: E501
        if 'member' in local_var_params and local_var_params['member'] is not None:  # noqa: E501
            query_params.append(('member', local_var_params['member']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{account}/{kind}/{identifier}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_member_from_role(self, account, kind, identifier, members, member, **kwargs):  # noqa: E501
        """Deletes an existing role membership  # noqa: E501

        Deletes an existing role membership.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  When the `members` query parameter is provided, you will get the members of a role.  When the `members` and `member` query parameters are provided, the role specfified by `member` will be removed as a member of the role specified in the endpoint URI.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_member_from_role(account, kind, identifier, members, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str identifier: ID of the role for which to get the information about (required)
        :param str members: Returns a list of the Role's members. (required)
        :param str member: The identifier of the Role to be added as a member. (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_member_from_role_with_http_info(account, kind, identifier, members, member, **kwargs)  # noqa: E501

    def remove_member_from_role_with_http_info(self, account, kind, identifier, members, member, **kwargs):  # noqa: E501
        """Deletes an existing role membership  # noqa: E501

        Deletes an existing role membership.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  When the `members` query parameter is provided, you will get the members of a role.  When the `members` and `member` query parameters are provided, the role specfified by `member` will be removed as a member of the role specified in the endpoint URI.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_member_from_role_with_http_info(account, kind, identifier, members, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str identifier: ID of the role for which to get the information about (required)
        :param str members: Returns a list of the Role's members. (required)
        :param str member: The identifier of the Role to be added as a member. (required)
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'kind',
            'identifier',
            'members',
            'member',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_member_from_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in local_var_params or  # noqa: E501
                                                        local_var_params['account'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account` when calling `remove_member_from_role`")  # noqa: E501
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and ('kind' not in local_var_params or  # noqa: E501
                                                        local_var_params['kind'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kind` when calling `remove_member_from_role`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if self.api_client.client_side_validation and ('identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `identifier` when calling `remove_member_from_role`")  # noqa: E501
        # verify the required parameter 'members' is set
        if self.api_client.client_side_validation and ('members' not in local_var_params or  # noqa: E501
                                                        local_var_params['members'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `members` when calling `remove_member_from_role`")  # noqa: E501
        # verify the required parameter 'member' is set
        if self.api_client.client_side_validation and ('member' not in local_var_params or  # noqa: E501
                                                        local_var_params['member'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `member` when calling `remove_member_from_role`")  # noqa: E501

        if self.api_client.client_side_validation and ('account' in local_var_params and  # noqa: E501
                                                        len(local_var_params['account']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `account` when calling `remove_member_from_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('kind' in local_var_params and  # noqa: E501
                                                        len(local_var_params['kind']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `kind` when calling `remove_member_from_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('identifier' in local_var_params and  # noqa: E501
                                                        len(local_var_params['identifier']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `identifier` when calling `remove_member_from_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('member' in local_var_params and  # noqa: E501
                                                        len(local_var_params['member']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `member` when calling `remove_member_from_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `remove_member_from_role`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account' in local_var_params:
            path_params['account'] = local_var_params['account']  # noqa: E501
        if 'kind' in local_var_params:
            path_params['kind'] = local_var_params['kind']  # noqa: E501
        if 'identifier' in local_var_params:
            path_params['identifier'] = local_var_params['identifier']  # noqa: E501

        query_params = []
        if 'members' in local_var_params and local_var_params['members'] is not None:  # noqa: E501
            query_params.append(('members', local_var_params['members']))  # noqa: E501
        if 'member' in local_var_params and local_var_params['member'] is not None:  # noqa: E501
            query_params.append(('member', local_var_params['member']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{account}/{kind}/{identifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_role(self, account, kind, identifier, **kwargs):  # noqa: E501
        """Get role information  # noqa: E501

        Gets detailed information about a specific role, including the role members.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  ##### Listing members  If `members` is provided, you will get the members of a role.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give limit a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is true, returns only the number of items in the list.  ##### Text search  If the search parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weights results so that those with matching id or a matching value of an annotation called name appear first, then those with another matching annotation value, and finally those with a matching kind.  ##### Parameter Priority  If Conjur is given any combination of optional parameters, it responds with ONLY results for the parameter of the highest priority.  1. `graph` 2. `all` 3. `memberships` 4. `members`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_role(account, kind, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str identifier: ID of the role for which to get the information about (required)
        :param str all: Returns an array of Role IDs representing all role memberships, expanded recursively.
        :param str memberships: Returns all direct role memberships (members not expanded recursively).
        :param str members: Returns a list of the Role's members.
        :param int offset: When listing members, start at this item number.
        :param int limit: When listing members, return up to this many results.
        :param bool count: When listing members, if `true`, return only the count of members.
        :param str search: When listing members, the results will be narrowed to only those matching the provided string
        :param str graph: If included in the query returns a graph view of the role
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.show_role_with_http_info(account, kind, identifier, **kwargs)  # noqa: E501

    def show_role_with_http_info(self, account, kind, identifier, **kwargs):  # noqa: E501
        """Get role information  # noqa: E501

        Gets detailed information about a specific role, including the role members.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  ##### Listing members  If `members` is provided, you will get the members of a role.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give limit a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is true, returns only the number of items in the list.  ##### Text search  If the search parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weights results so that those with matching id or a matching value of an annotation called name appear first, then those with another matching annotation value, and finally those with a matching kind.  ##### Parameter Priority  If Conjur is given any combination of optional parameters, it responds with ONLY results for the parameter of the highest priority.  1. `graph` 2. `all` 3. `memberships` 4. `members`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_role_with_http_info(account, kind, identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account: Organization account name (required)
        :param str kind: Type of resource (required)
        :param str identifier: ID of the role for which to get the information about (required)
        :param str all: Returns an array of Role IDs representing all role memberships, expanded recursively.
        :param str memberships: Returns all direct role memberships (members not expanded recursively).
        :param str members: Returns a list of the Role's members.
        :param int offset: When listing members, start at this item number.
        :param int limit: When listing members, return up to this many results.
        :param bool count: When listing members, if `true`, return only the count of members.
        :param str search: When listing members, the results will be narrowed to only those matching the provided string
        :param str graph: If included in the query returns a graph view of the role
        :param str x_request_id: Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account',
            'kind',
            'identifier',
            'all',
            'memberships',
            'members',
            'offset',
            'limit',
            'count',
            'search',
            'graph',
            'x_request_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in local_var_params or  # noqa: E501
                                                        local_var_params['account'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account` when calling `show_role`")  # noqa: E501
        # verify the required parameter 'kind' is set
        if self.api_client.client_side_validation and ('kind' not in local_var_params or  # noqa: E501
                                                        local_var_params['kind'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kind` when calling `show_role`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if self.api_client.client_side_validation and ('identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `identifier` when calling `show_role`")  # noqa: E501

        if self.api_client.client_side_validation and ('account' in local_var_params and  # noqa: E501
                                                        len(local_var_params['account']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `account` when calling `show_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('kind' in local_var_params and  # noqa: E501
                                                        len(local_var_params['kind']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `kind` when calling `show_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('identifier' in local_var_params and  # noqa: E501
                                                        len(local_var_params['identifier']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `identifier` when calling `show_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('search' in local_var_params and  # noqa: E501
                                                        len(local_var_params['search']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `search` when calling `show_role`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'x_request_id' in local_var_params and not re.search(r'^[a-zA-Z\d-]{1,255}$', local_var_params['x_request_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `x_request_id` when calling `show_role`, must conform to the pattern `/^[a-zA-Z\d-]{1,255}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account' in local_var_params:
            path_params['account'] = local_var_params['account']  # noqa: E501
        if 'kind' in local_var_params:
            path_params['kind'] = local_var_params['kind']  # noqa: E501
        if 'identifier' in local_var_params:
            path_params['identifier'] = local_var_params['identifier']  # noqa: E501

        query_params = []
        if 'all' in local_var_params and local_var_params['all'] is not None:  # noqa: E501
            query_params.append(('all', local_var_params['all']))  # noqa: E501
        if 'memberships' in local_var_params and local_var_params['memberships'] is not None:  # noqa: E501
            query_params.append(('memberships', local_var_params['memberships']))  # noqa: E501
        if 'members' in local_var_params and local_var_params['members'] is not None:  # noqa: E501
            query_params.append(('members', local_var_params['members']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'graph' in local_var_params and local_var_params['graph'] is not None:  # noqa: E501
            query_params.append(('graph', local_var_params['graph']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in local_var_params:
            header_params['X-Request-Id'] = local_var_params['x_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['conjurAuth']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{account}/{kind}/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
