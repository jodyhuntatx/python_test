# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from conjur.configuration import Configuration


class AuthenticatorsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'configured': 'list[str]',
        'enabled': 'list[str]',
        'installed': 'list[str]'
    }

    attribute_map = {
        'configured': 'configured',
        'enabled': 'enabled',
        'installed': 'installed'
    }

    def __init__(self, configured=None, enabled=None, installed=None, local_vars_configuration=None):  # noqa: E501
        """AuthenticatorsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._configured = None
        self._enabled = None
        self._installed = None
        self.discriminator = None

        if configured is not None:
            self.configured = configured
        if enabled is not None:
            self.enabled = enabled
        if installed is not None:
            self.installed = installed

    @property
    def configured(self):
        """Gets the configured of this AuthenticatorsResponse.  # noqa: E501

        The authenticators configured on the Conjur server  # noqa: E501

        :return: The configured of this AuthenticatorsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._configured

    @configured.setter
    def configured(self, configured):
        """Sets the configured of this AuthenticatorsResponse.

        The authenticators configured on the Conjur server  # noqa: E501

        :param configured: The configured of this AuthenticatorsResponse.  # noqa: E501
        :type: list[str]
        """

        self._configured = configured

    @property
    def enabled(self):
        """Gets the enabled of this AuthenticatorsResponse.  # noqa: E501

        The authenticators enabled on the Conjur server  # noqa: E501

        :return: The enabled of this AuthenticatorsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AuthenticatorsResponse.

        The authenticators enabled on the Conjur server  # noqa: E501

        :param enabled: The enabled of this AuthenticatorsResponse.  # noqa: E501
        :type: list[str]
        """

        self._enabled = enabled

    @property
    def installed(self):
        """Gets the installed of this AuthenticatorsResponse.  # noqa: E501

        The authenticators installed on the Conjur server  # noqa: E501

        :return: The installed of this AuthenticatorsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._installed

    @installed.setter
    def installed(self, installed):
        """Sets the installed of this AuthenticatorsResponse.

        The authenticators installed on the Conjur server  # noqa: E501

        :param installed: The installed of this AuthenticatorsResponse.  # noqa: E501
        :type: list[str]
        """

        self._installed = installed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticatorsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticatorsResponse):
            return True

        return self.to_dict() != other.to_dict()
