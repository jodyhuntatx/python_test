# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from conjur.configuration import Configuration


class Info(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authenticators': 'InfoAuthenticators',
        'configuration': 'object',
        'container': 'str',
        'release': 'str',
        'role': 'str',
        'services': 'object',
        'version': 'str'
    }

    attribute_map = {
        'authenticators': 'authenticators',
        'configuration': 'configuration',
        'container': 'container',
        'release': 'release',
        'role': 'role',
        'services': 'services',
        'version': 'version'
    }

    def __init__(self, authenticators=None, configuration=None, container=None, release=None, role=None, services=None, version=None, local_vars_configuration=None):  # noqa: E501
        """Info - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authenticators = None
        self._configuration = None
        self._container = None
        self._release = None
        self._role = None
        self._services = None
        self._version = None
        self.discriminator = None

        if authenticators is not None:
            self.authenticators = authenticators
        if configuration is not None:
            self.configuration = configuration
        if container is not None:
            self.container = container
        if release is not None:
            self.release = release
        if role is not None:
            self.role = role
        if services is not None:
            self.services = services
        if version is not None:
            self.version = version

    @property
    def authenticators(self):
        """Gets the authenticators of this Info.  # noqa: E501


        :return: The authenticators of this Info.  # noqa: E501
        :rtype: InfoAuthenticators
        """
        return self._authenticators

    @authenticators.setter
    def authenticators(self, authenticators):
        """Sets the authenticators of this Info.


        :param authenticators: The authenticators of this Info.  # noqa: E501
        :type: InfoAuthenticators
        """

        self._authenticators = authenticators

    @property
    def configuration(self):
        """Gets the configuration of this Info.  # noqa: E501


        :return: The configuration of this Info.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Info.


        :param configuration: The configuration of this Info.  # noqa: E501
        :type: object
        """

        self._configuration = configuration

    @property
    def container(self):
        """Gets the container of this Info.  # noqa: E501


        :return: The container of this Info.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Info.


        :param container: The container of this Info.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def release(self):
        """Gets the release of this Info.  # noqa: E501


        :return: The release of this Info.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this Info.


        :param release: The release of this Info.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def role(self):
        """Gets the role of this Info.  # noqa: E501


        :return: The role of this Info.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Info.


        :param role: The role of this Info.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def services(self):
        """Gets the services of this Info.  # noqa: E501


        :return: The services of this Info.  # noqa: E501
        :rtype: object
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Info.


        :param services: The services of this Info.  # noqa: E501
        :type: object
        """

        self._services = services

    @property
    def version(self):
        """Gets the version of this Info.  # noqa: E501


        :return: The version of this Info.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Info.


        :param version: The version of this Info.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Info):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Info):
            return True

        return self.to_dict() != other.to_dict()
