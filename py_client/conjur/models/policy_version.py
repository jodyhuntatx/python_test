# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from conjur.configuration import Configuration


class PolicyVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_ip': 'str',
        'created_at': 'str',
        'finished_at': 'str',
        'id': 'str',
        'policy_sha256': 'str',
        'policy_text': 'str',
        'role': 'str',
        'version': 'float'
    }

    attribute_map = {
        'client_ip': 'client_ip',
        'created_at': 'created_at',
        'finished_at': 'finished_at',
        'id': 'id',
        'policy_sha256': 'policy_sha256',
        'policy_text': 'policy_text',
        'role': 'role',
        'version': 'version'
    }

    def __init__(self, client_ip=None, created_at=None, finished_at=None, id=None, policy_sha256=None, policy_text=None, role=None, version=None, local_vars_configuration=None):  # noqa: E501
        """PolicyVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_ip = None
        self._created_at = None
        self._finished_at = None
        self._id = None
        self._policy_sha256 = None
        self._policy_text = None
        self._role = None
        self._version = None
        self.discriminator = None

        if client_ip is not None:
            self.client_ip = client_ip
        if created_at is not None:
            self.created_at = created_at
        if finished_at is not None:
            self.finished_at = finished_at
        if id is not None:
            self.id = id
        if policy_sha256 is not None:
            self.policy_sha256 = policy_sha256
        if policy_text is not None:
            self.policy_text = policy_text
        if role is not None:
            self.role = role
        if version is not None:
            self.version = version

    @property
    def client_ip(self):
        """Gets the client_ip of this PolicyVersion.  # noqa: E501


        :return: The client_ip of this PolicyVersion.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this PolicyVersion.


        :param client_ip: The client_ip of this PolicyVersion.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def created_at(self):
        """Gets the created_at of this PolicyVersion.  # noqa: E501


        :return: The created_at of this PolicyVersion.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PolicyVersion.


        :param created_at: The created_at of this PolicyVersion.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def finished_at(self):
        """Gets the finished_at of this PolicyVersion.  # noqa: E501


        :return: The finished_at of this PolicyVersion.  # noqa: E501
        :rtype: str
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this PolicyVersion.


        :param finished_at: The finished_at of this PolicyVersion.  # noqa: E501
        :type: str
        """

        self._finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this PolicyVersion.  # noqa: E501


        :return: The id of this PolicyVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyVersion.


        :param id: The id of this PolicyVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def policy_sha256(self):
        """Gets the policy_sha256 of this PolicyVersion.  # noqa: E501


        :return: The policy_sha256 of this PolicyVersion.  # noqa: E501
        :rtype: str
        """
        return self._policy_sha256

    @policy_sha256.setter
    def policy_sha256(self, policy_sha256):
        """Sets the policy_sha256 of this PolicyVersion.


        :param policy_sha256: The policy_sha256 of this PolicyVersion.  # noqa: E501
        :type: str
        """

        self._policy_sha256 = policy_sha256

    @property
    def policy_text(self):
        """Gets the policy_text of this PolicyVersion.  # noqa: E501


        :return: The policy_text of this PolicyVersion.  # noqa: E501
        :rtype: str
        """
        return self._policy_text

    @policy_text.setter
    def policy_text(self, policy_text):
        """Sets the policy_text of this PolicyVersion.


        :param policy_text: The policy_text of this PolicyVersion.  # noqa: E501
        :type: str
        """

        self._policy_text = policy_text

    @property
    def role(self):
        """Gets the role of this PolicyVersion.  # noqa: E501


        :return: The role of this PolicyVersion.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PolicyVersion.


        :param role: The role of this PolicyVersion.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def version(self):
        """Gets the version of this PolicyVersion.  # noqa: E501


        :return: The version of this PolicyVersion.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PolicyVersion.


        :param version: The version of this PolicyVersion.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyVersion):
            return True

        return self.to_dict() != other.to_dict()
