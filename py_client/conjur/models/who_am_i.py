# coding: utf-8

"""
    Conjur

    This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Contact: conj_maintainers@cyberark.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from conjur.configuration import Configuration


class WhoAmI(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account': 'str',
        'client_ip': 'str',
        'token_issued_at': 'str',
        'user_agent': 'str',
        'username': 'str'
    }

    attribute_map = {
        'account': 'account',
        'client_ip': 'client_ip',
        'token_issued_at': 'token_issued_at',
        'user_agent': 'user_agent',
        'username': 'username'
    }

    def __init__(self, account=None, client_ip=None, token_issued_at=None, user_agent=None, username=None, local_vars_configuration=None):  # noqa: E501
        """WhoAmI - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account = None
        self._client_ip = None
        self._token_issued_at = None
        self._user_agent = None
        self._username = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if client_ip is not None:
            self.client_ip = client_ip
        if token_issued_at is not None:
            self.token_issued_at = token_issued_at
        if user_agent is not None:
            self.user_agent = user_agent
        if username is not None:
            self.username = username

    @property
    def account(self):
        """Gets the account of this WhoAmI.  # noqa: E501

        The account attribute of the client provided access token.  # noqa: E501

        :return: The account of this WhoAmI.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this WhoAmI.

        The account attribute of the client provided access token.  # noqa: E501

        :param account: The account of this WhoAmI.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def client_ip(self):
        """Gets the client_ip of this WhoAmI.  # noqa: E501

        The request client IP address as determined by Conjur. This same IP address appears in application logs and audit logs.  # noqa: E501

        :return: The client_ip of this WhoAmI.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this WhoAmI.

        The request client IP address as determined by Conjur. This same IP address appears in application logs and audit logs.  # noqa: E501

        :param client_ip: The client_ip of this WhoAmI.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def token_issued_at(self):
        """Gets the token_issued_at of this WhoAmI.  # noqa: E501

        The issued timestamp, that is, when the provided access token was created (iat field in the JWT)  # noqa: E501

        :return: The token_issued_at of this WhoAmI.  # noqa: E501
        :rtype: str
        """
        return self._token_issued_at

    @token_issued_at.setter
    def token_issued_at(self, token_issued_at):
        """Sets the token_issued_at of this WhoAmI.

        The issued timestamp, that is, when the provided access token was created (iat field in the JWT)  # noqa: E501

        :param token_issued_at: The token_issued_at of this WhoAmI.  # noqa: E501
        :type: str
        """

        self._token_issued_at = token_issued_at

    @property
    def user_agent(self):
        """Gets the user_agent of this WhoAmI.  # noqa: E501

        The incoming request HTTP user agent header.  # noqa: E501

        :return: The user_agent of this WhoAmI.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this WhoAmI.

        The incoming request HTTP user agent header.  # noqa: E501

        :param user_agent: The user_agent of this WhoAmI.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def username(self):
        """Gets the username of this WhoAmI.  # noqa: E501

        The username attribute of the provided access token.  # noqa: E501

        :return: The username of this WhoAmI.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this WhoAmI.

        The username attribute of the provided access token.  # noqa: E501

        :param username: The username of this WhoAmI.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WhoAmI):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WhoAmI):
            return True

        return self.to_dict() != other.to_dict()
